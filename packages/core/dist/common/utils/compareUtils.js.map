{"version":3,"sources":["../src/common/utils/compareUtils.ts"],"names":[],"mappings":"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","file":"compareUtils.js","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nexport interface IKeyWhitelist<T> {\n    include: Array<keyof T>;\n}\n\nexport interface IKeyBlacklist<T> {\n    exclude: Array<keyof T>;\n}\n\n/**\n * Returns true if the arrays are equal. Elements will be shallowly compared by\n * default, or they will be compared using the custom `compare` function if one\n * is provided.\n */\nexport function arraysEqual(arrA: any[], arrB: any[], compare = (a: any, b: any) => a === b) {\n    // treat `null` and `undefined` as the same\n    if (arrA == null && arrB == null) {\n        return true;\n    } else if (arrA == null || arrB == null || arrA.length !== arrB.length) {\n        return false;\n    } else {\n        return arrA.every((a, i) => compare(a, arrB[i]));\n    }\n}\n\n/**\n * Shallow comparison between objects. If `keys` is provided, just that subset\n * of keys will be compared; otherwise, all keys will be compared.\n */\nexport function shallowCompareKeys<T extends object>(objA: T, objB: T, keys?: IKeyBlacklist<T> | IKeyWhitelist<T>) {\n    // treat `null` and `undefined` as the same\n    if (objA == null && objB == null) {\n        return true;\n    } else if (objA == null || objB == null) {\n        return false;\n    } else if (Array.isArray(objA) || Array.isArray(objB)) {\n        return false;\n    } else if (keys != null) {\n        return _shallowCompareKeys(objA, objB, keys);\n    } else {\n        // shallowly compare all keys from both objects\n        const keysA = Object.keys(objA) as Array<keyof T>;\n        const keysB = Object.keys(objB) as Array<keyof T>;\n        return (\n            _shallowCompareKeys(objA, objB, { include: keysA }) && _shallowCompareKeys(objA, objB, { include: keysB })\n        );\n    }\n}\n\n/**\n * Deep comparison between objects. If `keys` is provided, just that subset of\n * keys will be compared; otherwise, all keys will be compared.\n */\nexport function deepCompareKeys(objA: any, objB: any, keys?: string[]): boolean {\n    if (objA === objB) {\n        return true;\n    } else if (objA == null && objB == null) {\n        // treat `null` and `undefined` as the same\n        return true;\n    } else if (objA == null || objB == null) {\n        return false;\n    } else if (Array.isArray(objA) || Array.isArray(objB)) {\n        return arraysEqual(objA, objB, deepCompareKeys);\n    } else if (_isSimplePrimitiveType(objA) || _isSimplePrimitiveType(objB)) {\n        return objA === objB;\n    } else if (keys != null) {\n        return _deepCompareKeys(objA, objB, keys);\n    } else if (objA.constructor !== objB.constructor) {\n        return false;\n    } else {\n        const keysA = Object.keys(objA);\n        const keysB = Object.keys(objB);\n        if (keysA == null || keysB == null) {\n            return false;\n        }\n        if (keysA.length === 0 && keysB.length === 0) {\n            return true;\n        }\n        return arraysEqual(keysA, keysB) && _deepCompareKeys(objA, objB, keysA);\n    }\n}\n\n/**\n * Returns a descriptive object for each key whose values are shallowly unequal\n * between two provided objects. Useful for debugging shouldComponentUpdate.\n */\nexport function getShallowUnequalKeyValues<T extends object>(\n    objA: T,\n    objB: T,\n    keys?: IKeyBlacklist<T> | IKeyWhitelist<T>,\n) {\n    // default param values let null values pass through, so we have to take\n    // this more thorough approach\n    const definedObjA = objA == null ? {} : objA;\n    const definedObjB = objB == null ? {} : objB;\n\n    const filteredKeys = _filterKeys(definedObjA, definedObjB, keys == null ? { exclude: [] } : keys);\n    return _getUnequalKeyValues(definedObjA, definedObjB, filteredKeys, (a, b, key) => {\n        return shallowCompareKeys(a, b, { include: [key] });\n    });\n}\n\n/**\n * Returns a descriptive object for each key whose values are deeply unequal\n * between two provided objects. Useful for debugging shouldComponentUpdate.\n */\nexport function getDeepUnequalKeyValues<T extends object>(\n    objA: T = ({} as any) as T,\n    objB: T = ({} as any) as T,\n    keys?: Array<keyof T>,\n) {\n    const filteredKeys = keys == null ? _unionKeys(objA, objB) : keys;\n    return _getUnequalKeyValues(objA, objB, filteredKeys, (a, b, key) => {\n        return deepCompareKeys(a, b, [key]);\n    });\n}\n\n// Private helpers\n// ===============\n\n/**\n * Partial shallow comparison between objects using the given list of keys.\n */\nfunction _shallowCompareKeys<T>(objA: T, objB: T, keys: IKeyBlacklist<T> | IKeyWhitelist<T>) {\n    return _filterKeys(objA, objB, keys).every(key => {\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && objA[key] === objB[key];\n    });\n}\n\n/**\n * Partial deep comparison between objects using the given list of keys.\n */\nfunction _deepCompareKeys(objA: any, objB: any, keys: string[]): boolean {\n    return keys.every(key => {\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && deepCompareKeys(objA[key], objB[key]);\n    });\n}\n\nfunction _isSimplePrimitiveType(value: any) {\n    return typeof value === \"number\" || typeof value === \"string\" || typeof value === \"boolean\";\n}\n\nfunction _filterKeys<T>(objA: T, objB: T, keys: IKeyBlacklist<T> | IKeyWhitelist<T>) {\n    if (_isWhitelist(keys)) {\n        return keys.include;\n    } else {\n        const keysA = Object.keys(objA);\n        const keysB = Object.keys(objB);\n\n        // merge keys from both objects into a big set for quick access\n        const keySet = _arrayToObject(keysA.concat(keysB));\n\n        // delete blacklisted keys from the key set\n        keys.exclude.forEach(key => delete keySet[key]);\n\n        // return the remaining keys as an array\n        return Object.keys(keySet) as Array<keyof T>;\n    }\n}\n\nfunction _isWhitelist<T>(keys: any): keys is IKeyWhitelist<T> {\n    return keys != null && (keys as IKeyWhitelist<T>).include != null;\n}\n\nfunction _arrayToObject(arr: any[]) {\n    return arr.reduce((obj: any, element: any) => {\n        obj[element] = true;\n        return obj;\n    }, {});\n}\n\nfunction _getUnequalKeyValues<T extends object>(\n    objA: T,\n    objB: T,\n    keys: Array<keyof T>,\n    compareFn: (objA: any, objB: any, key: keyof T) => boolean,\n) {\n    const unequalKeys = keys.filter(key => !compareFn(objA, objB, key));\n    const unequalKeyValues = unequalKeys.map(key => ({\n        key,\n        valueA: objA[key],\n        valueB: objB[key],\n    }));\n    return unequalKeyValues;\n}\n\nfunction _unionKeys<T extends object>(objA: T, objB: T) {\n    const keysA = Object.keys(objA);\n    const keysB = Object.keys(objB);\n\n    const concatKeys = keysA.concat(keysB);\n    const keySet = _arrayToObject(concatKeys);\n\n    return Object.keys(keySet) as Array<keyof T>;\n}\n"]}