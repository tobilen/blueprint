{"version":3,"sources":["../src/components/icon/icon.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,uCAAyC;AACzC,kDAAoD;AACpD,6BAA+B;AAE/B,uCAA6D;AAwB7D,IAAa,IAAI;IAAS,gCAA0E;IAApG;;IAqBA,CAAC;IAdU,qBAAM,GAAb;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,IAAM,eAAyF,EAAvF,wBAAS,EAAE,sBAAQ,EAAE,kBAAM,EAAE,gBAA6B,EAA7B,oDAA6B,EAAE,+EAA2B,CAAC;QAEhG,IAAM,OAAO,GAAG,UAAU,CACtB,YAAY,CAAC,QAAQ,CAAC,EACtB,gBAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAC3B,gBAAO,CAAC,WAAW,CAAC,MAAM,CAAC,EAC3B,SAAS,CACZ,CAAC;QACF,MAAM,CAAC,+CAAM,SAAS,EAAE,OAAO,IAAM,SAAS,EAAI,CAAC;IACvD,CAAC;IACL,WAAC;AAAD,CArBA,AAqBC,CArByB,KAAK,CAAC,SAAS,GAqBxC;AApBiB,gBAAW,GAAG,gBAAgB,CAAC;AAEtB,kBAAa,GAAG,EAAQ,CAAC;AACzB,eAAU,GAAG,EAAQ,CAAC;AACtB,iBAAY,GAAG,SAAsB,CAAC;AALpD,IAAI;IADhB,UAAU;GACE,IAAI,CAqBhB;AArBY,oBAAI;AAuBjB,wFAAwF;AACxF,sBAAsB,IAAyB;IAC3C,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACX,KAAK,IAAI,CAAC,aAAa;YACnB,MAAM,CAAC,gBAAO,CAAC,aAAa,CAAC;QACjC,KAAK,IAAI,CAAC,UAAU;YAChB,MAAM,CAAC,gBAAO,CAAC,UAAU,CAAC;QAC9B;YACI,MAAM,CAAC,gBAAO,CAAC,IAAI,CAAC;IAC5B,CAAC;AACL,CAAC","file":"icon.js","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\n\nimport { Classes, IIntentProps, IProps } from \"../../common\";\nimport { IconName } from \"../../generated/iconName\";\n\nexport { IconName };\n\nexport interface IIconProps extends IIntentProps, IProps {\n    /**\n     * Name of the icon (with or without `\"pt-icon-\"` prefix).\n     * If `undefined`, this component will render nothing.\n     */\n    iconName: IconName | undefined;\n\n    /**\n     * Size of the icon.\n     * Blueprint provides each icon in two sizes: 16px and 20px. The keyword `\"inherit\"` will\n     * render a 20px icon but inherit `font-size` from its parent.\n     * Constants are exposed for each of these values on the component itself:\n     * `Icon.SIZE_(STANDARD|LARGE|INHERIT)`,\n     * @default 16\n     */\n    iconSize?: 16 | 20 | \"inherit\";\n}\n\n@PureRender\nexport class Icon extends React.Component<IIconProps & React.HTMLAttributes<HTMLSpanElement>, never> {\n    public static displayName = \"Blueprint.Icon\";\n\n    public static readonly SIZE_STANDARD = 16 as 16;\n    public static readonly SIZE_LARGE = 20 as 20;\n    public static readonly SIZE_INHERIT = \"inherit\" as \"inherit\";\n\n    public render() {\n        if (this.props.iconName == null) {\n            return null;\n        }\n        const { className, iconName, intent, iconSize = Icon.SIZE_STANDARD, ...restProps } = this.props;\n\n        const classes = classNames(\n            getSizeClass(iconSize),\n            Classes.iconClass(iconName),\n            Classes.intentClass(intent),\n            className,\n        );\n        return <span className={classes} {...restProps} />;\n    }\n}\n\n// NOTE: not using a type alias here so the full union will appear in the interface docs\nfunction getSizeClass(size: 16 | 20 | \"inherit\") {\n    switch (size) {\n        case Icon.SIZE_STANDARD:\n            return Classes.ICON_STANDARD;\n        case Icon.SIZE_LARGE:\n            return Classes.ICON_LARGE;\n        default:\n            return Classes.ICON;\n    }\n}\n"]}