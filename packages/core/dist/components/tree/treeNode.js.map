{"version":3,"sources":["../src/components/tree/treeNode.tsx"],"names":[],"mappings":"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","file":"treeNode.js","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../../common/classes\";\nimport { safeInvoke } from \"../../common/utils\";\nimport { Collapse } from \"../collapse/collapse\";\nimport { Icon, IconName } from \"../icon/icon\";\n\nexport interface ITreeNode {\n    /**\n     * Child tree nodes of this node.\n     */\n    childNodes?: ITreeNode[];\n\n    /**\n     * A space-delimited string of class names to apply to the node.\n     */\n    className?: string;\n\n    /**\n     * Whether the caret to expand/collapse a node should be shown.\n     * If not specified, this will be true if the node has children and false otherwise.\n     */\n    hasCaret?: boolean;\n\n    /**\n     * The name of a Blueprint icon to display next to the node's label.\n     */\n    iconName?: IconName;\n\n    /**\n     * A unique identifier for the node.\n     */\n    id: string | number;\n\n    /**\n     * Whether the children of this node are displayed.\n     * @default false\n     */\n    isExpanded?: boolean;\n\n    /**\n     * Whether this node is selected.\n     * @default false\n     */\n    isSelected?: boolean;\n\n    /**\n     * The main label for the node.\n     */\n    label: string | JSX.Element;\n\n    /**\n     * A secondary label/component that is displayed at the right side of the node.\n     */\n    secondaryLabel?: string | JSX.Element;\n}\n\nexport interface ITreeNodeProps extends ITreeNode {\n    children?: React.ReactNode;\n    contentRef?: (node: TreeNode, element: HTMLDivElement | null) => void;\n    depth: number;\n    key?: string | number;\n    onClick?: (node: TreeNode, e: React.MouseEvent<HTMLDivElement>) => void;\n    onCollapse?: (node: TreeNode, e: React.MouseEvent<HTMLSpanElement>) => void;\n    onContextMenu?: (node: TreeNode, e: React.MouseEvent<HTMLDivElement>) => void;\n    onDoubleClick?: (node: TreeNode, e: React.MouseEvent<HTMLDivElement>) => void;\n    onExpand?: (node: TreeNode, e: React.MouseEvent<HTMLSpanElement>) => void;\n    path: number[];\n}\n\nexport class TreeNode extends React.Component<ITreeNodeProps, {}> {\n    public render() {\n        const { children, className, hasCaret, iconName, isExpanded, isSelected, label } = this.props;\n\n        const showCaret = hasCaret == null ? React.Children.count(children) > 0 : hasCaret;\n        const caretClass = showCaret ? Classes.TREE_NODE_CARET : Classes.TREE_NODE_CARET_NONE;\n        const caretStateClass = isExpanded ? Classes.TREE_NODE_CARET_OPEN : Classes.TREE_NODE_CARET_CLOSED;\n        const caretClasses = classNames(caretClass, Classes.ICON_STANDARD, {\n            [caretStateClass]: showCaret,\n        });\n\n        const classes = classNames(\n            Classes.TREE_NODE,\n            {\n                [Classes.TREE_NODE_SELECTED]: isSelected,\n                [Classes.TREE_NODE_EXPANDED]: isExpanded,\n            },\n            className,\n        );\n\n        const contentClasses = classNames(Classes.TREE_NODE_CONTENT, `pt-tree-node-content-${this.props.depth}`);\n\n        return (\n            <li className={classes}>\n                <div\n                    className={contentClasses}\n                    onClick={this.handleClick}\n                    onContextMenu={this.handleContextMenu}\n                    onDoubleClick={this.handleDoubleClick}\n                    ref={this.handleContentRef}\n                >\n                    <span className={caretClasses} onClick={showCaret ? this.handleCaretClick : null} />\n                    <Icon className={Classes.TREE_NODE_ICON} iconName={iconName} />\n                    <span className={Classes.TREE_NODE_LABEL}>{label}</span>\n                    {this.maybeRenderSecondaryLabel()}\n                </div>\n                <Collapse isOpen={isExpanded}>{children}</Collapse>\n            </li>\n        );\n    }\n\n    private maybeRenderSecondaryLabel() {\n        if (this.props.secondaryLabel != null) {\n            return <span className={Classes.TREE_NODE_SECONDARY_LABEL}>{this.props.secondaryLabel}</span>;\n        } else {\n            return undefined;\n        }\n    }\n\n    private handleCaretClick = (e: React.MouseEvent<HTMLSpanElement>) => {\n        e.stopPropagation();\n        const { isExpanded, onCollapse, onExpand } = this.props;\n        safeInvoke(isExpanded ? onCollapse : onExpand, this, e);\n    };\n\n    private handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        safeInvoke(this.props.onClick, this, e);\n    };\n\n    private handleContentRef = (element: HTMLDivElement | null) => {\n        safeInvoke(this.props.contentRef, this, element);\n    };\n\n    private handleContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {\n        safeInvoke(this.props.onContextMenu, this, e);\n    };\n\n    private handleDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        safeInvoke(this.props.onDoubleClick, this, e);\n    };\n}\n"]}