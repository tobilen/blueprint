{"version":3,"sources":["../src/components/forms/controls.tsx"],"names":[],"mappings":"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","file":"controls.js","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\n// HACKHACK: these components should go in separate files\n// tslint:disable max-classes-per-file\n\n// we need some empty interfaces to show up in docs\n// tslint:disable no-empty-interface\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../../common/classes\";\nimport { IProps, removeNonHTMLProps } from \"../../common/props\";\nimport { safeInvoke } from \"../../common/utils\";\nimport { HTMLInputProps } from \"../../index\";\n\nexport interface IControlProps extends IProps, HTMLInputProps {\n    // NOTE: HTML props are duplicated here to provide control-specific documentation\n\n    /** Whether the control is checked. */\n    checked?: boolean;\n\n    /** Whether the control is initially checked (uncontrolled mode). */\n    defaultChecked?: boolean;\n\n    /** Whether the control is non-interactive. */\n    disabled?: boolean;\n\n    /** Ref handler that receives HTML `<input>` element backing this component. */\n    inputRef?: (ref: HTMLInputElement) => any;\n\n    /** Whether the control is inline. */\n    inline?: boolean;\n\n    /**\n     * Text label for the control.\n     *\n     * This prop actually supports JSX elements, but TypeScript will throw an error because\n     * `HTMLProps` only allows strings. Use `labelElement` to supply a JSX element in TypeScript.\n     */\n    label?: string;\n\n    /**\n     * JSX Element label for the control.\n     *\n     * This prop is necessary for TypeScript consumers as the type definition for `label` only\n     * accepts strings. JavaScript consumers can provide a JSX element directly to `label`.\n     */\n    labelElement?: React.ReactNode;\n\n    /** Event handler invoked when input value is changed. */\n    onChange?: React.FormEventHandler<HTMLInputElement>;\n}\n\nconst INVALID_PROPS: Array<keyof ICheckboxProps> = [\n    // we spread props to `<input>` but render `children` as its sibling\n    \"children\",\n    \"defaultIndeterminate\",\n    \"indeterminate\",\n    \"labelElement\",\n];\n\n/** Base Component class for all Controls */\nexport class Control<P extends IControlProps> extends React.Component<P, {}> {\n    // generates control markup for given input type.\n    // optional inputRef in case the component needs reference for itself (don't forget to invoke the prop!).\n    protected renderControl(type: \"checkbox\" | \"radio\", typeClassName: string, inputRef = this.props.inputRef) {\n        const className = classNames(\n            Classes.CONTROL,\n            typeClassName,\n            {\n                [Classes.DISABLED]: this.props.disabled,\n                [Classes.INLINE]: this.props.inline,\n            },\n            this.props.className,\n        );\n        const inputProps = removeNonHTMLProps(this.props, INVALID_PROPS, true);\n        return (\n            <label className={className} style={this.props.style}>\n                <input {...inputProps} ref={inputRef} type={type} />\n                <span className={Classes.CONTROL_INDICATOR} />\n                {this.props.label}\n                {this.props.labelElement}\n                {this.props.children}\n            </label>\n        );\n    }\n}\n\nexport interface ICheckboxProps extends IControlProps {\n    /** Whether this checkbox is initially indeterminate (uncontrolled mode). */\n    defaultIndeterminate?: boolean;\n\n    /**\n     * Whether this checkbox is indeterminate, or \"partially checked.\"\n     * The checkbox will appear with a small dash instead of a tick to indicate that the value\n     * is not exactly true or false.\n     */\n    indeterminate?: boolean;\n}\n\nexport class Checkbox extends Control<ICheckboxProps> {\n    public static displayName = \"Blueprint.Checkbox\";\n\n    // must maintain internal reference for `indeterminate` support\n    private input: HTMLInputElement;\n\n    public render() {\n        return this.renderControl(\"checkbox\", \"pt-checkbox\", this.handleInputRef);\n    }\n\n    public componentDidMount() {\n        if (this.props.defaultIndeterminate != null) {\n            this.input.indeterminate = this.props.defaultIndeterminate;\n        }\n        this.updateIndeterminate();\n    }\n\n    public componentDidUpdate() {\n        this.updateIndeterminate();\n    }\n\n    private updateIndeterminate() {\n        if (this.props.indeterminate != null) {\n            this.input.indeterminate = this.props.indeterminate;\n        }\n    }\n\n    private handleInputRef = (ref: HTMLInputElement) => {\n        this.input = ref;\n        safeInvoke(this.props.inputRef, ref);\n    };\n}\n\nexport interface ISwitchProps extends IControlProps {}\n\nexport class Switch extends Control<ISwitchProps> {\n    public static displayName = \"Blueprint.Switch\";\n\n    public render() {\n        return this.renderControl(\"checkbox\", \"pt-switch\");\n    }\n}\n\nexport interface IRadioProps extends IControlProps {}\n\nexport class Radio extends Control<IRadioProps> {\n    public static displayName = \"Blueprint.Radio\";\n\n    public render() {\n        return this.renderControl(\"radio\", \"pt-radio\");\n    }\n}\n\nexport const CheckboxFactory = React.createFactory(Checkbox);\nexport const SwitchFactory = React.createFactory(Switch);\nexport const RadioFactory = React.createFactory(Radio);\n"]}