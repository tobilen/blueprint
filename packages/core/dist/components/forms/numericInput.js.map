{"version":3,"sources":["../src/components/forms/numericInput.tsx"],"names":[],"mappings":"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","file":"numericInput.js","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\n\nimport {\n    AbstractComponent,\n    Classes,\n    HTMLInputProps,\n    IconName,\n    IIntentProps,\n    IProps,\n    Keys,\n    Position,\n    removeNonHTMLProps,\n    Utils,\n} from \"../../common\";\nimport * as Errors from \"../../common/errors\";\n\nimport { Button } from \"../button/buttons\";\nimport { InputGroup } from \"./inputGroup\";\n\nexport interface INumericInputProps extends IIntentProps, IProps {\n    /**\n     * Whether to allow only floating-point number characters in the field,\n     * mimicking the native `input[type=\"number\"]`.\n     * @default true\n     */\n    allowNumericCharactersOnly?: boolean;\n\n    /**\n     * The position of the buttons with respect to the input field.\n     * @default Position.RIGHT\n     */\n    buttonPosition?: Position.LEFT | Position.RIGHT | \"none\";\n\n    /**\n     * Whether the value should be clamped to `[min, max]` on blur.\n     * The value will be clamped to each bound only if the bound is defined.\n     * Note that native `input[type=\"number\"]` controls do *NOT* clamp on blur.\n     * @default false\n     */\n    clampValueOnBlur?: boolean;\n\n    /**\n     * Whether the input is non-interactive.\n     * @default false\n     */\n    disabled?: boolean;\n\n    /**\n     * If set to `true`, the input will display with larger styling.\n     * This is equivalent to setting `pt-large` via className on the\n     * parent `.pt-control-group` and on the child `.pt-input-group`.\n     * @default false\n     */\n    large?: boolean;\n\n    /**\n     * Name of the icon (the part after `pt-icon-`) to render\n     * on the left side of input.\n     */\n    leftIconName?: IconName;\n\n    /** The placeholder text in the absence of any value. */\n    placeholder?: string;\n\n    /**\n     * The increment between successive values when `shift` is held.\n     * @default 10\n     */\n    majorStepSize?: number;\n\n    /** The maximum value of the input. */\n    max?: number;\n\n    /** The minimum value of the input. */\n    min?: number;\n\n    /**\n     * The increment between successive values when `alt` is held.\n     * @default 0.1\n     */\n    minorStepSize?: number;\n\n    /**\n     * Whether the entire text field should be selected on focus.\n     * @default false\n     */\n    selectAllOnFocus?: boolean;\n\n    /**\n     * Whether the entire text field should be selected on increment.\n     * @default false\n     */\n    selectAllOnIncrement?: boolean;\n\n    /**\n     * The increment between successive values when no modifier keys are held.\n     * @default 1\n     */\n    stepSize?: number;\n\n    /** The value to display in the input field. */\n    value?: number | string;\n\n    /** The callback invoked when the value changes due to a button click. */\n    onButtonClick?(valueAsNumber: number, valueAsString: string): void;\n\n    /** The callback invoked when the value changes due to typing, arrow keys, or button clicks. */\n    onValueChange?(valueAsNumber: number, valueAsString: string): void;\n}\n\nexport interface INumericInputState {\n    isInputGroupFocused?: boolean;\n    isButtonGroupFocused?: boolean;\n    shouldSelectAfterUpdate?: boolean;\n    stepMaxPrecision?: number;\n    value?: string;\n}\n\nenum IncrementDirection {\n    DOWN = -1,\n    UP = +1,\n}\n\n@PureRender\nexport class NumericInput extends AbstractComponent<HTMLInputProps & INumericInputProps, INumericInputState> {\n    public static displayName = \"Blueprint.NumericInput\";\n\n    public static VALUE_EMPTY = \"\";\n    public static VALUE_ZERO = \"0\";\n\n    public static defaultProps: INumericInputProps = {\n        allowNumericCharactersOnly: true,\n        buttonPosition: Position.RIGHT,\n        clampValueOnBlur: false,\n        large: false,\n        majorStepSize: 10,\n        minorStepSize: 0.1,\n        selectAllOnFocus: false,\n        selectAllOnIncrement: false,\n        stepSize: 1,\n        value: NumericInput.VALUE_EMPTY,\n    };\n\n    private static DECREMENT_KEY = \"decrement\";\n    private static INCREMENT_KEY = \"increment\";\n\n    private static DECREMENT_ICON_NAME: IconName = \"chevron-down\";\n    private static INCREMENT_ICON_NAME: IconName = \"chevron-up\";\n\n    /**\n     * A regex that matches a string of length 1 (i.e. a standalone character)\n     * if and only if it is a floating-point number character as defined by W3C:\n     * https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n     *\n     * Floating-point number characters are the only characters that can be\n     * printed within a default input[type=\"number\"]. This component should\n     * behave the same way when this.props.allowNumericCharactersOnly = true.\n     * See here for the input[type=\"number\"].value spec:\n     * https://www.w3.org/TR/2012/WD-html-markup-20120329/input.number.html#input.number.attrs.value\n     */\n    private static FLOATING_POINT_NUMBER_CHARACTER_REGEX = /^[Ee0-9\\+\\-\\.]$/;\n\n    private inputElement: HTMLInputElement;\n\n    // updating these flags need not trigger re-renders, so don't include them in this.state.\n    private didPasteEventJustOccur = false;\n    private shouldSelectAfterUpdate = false;\n\n    public constructor(props?: HTMLInputProps & INumericInputProps, context?: any) {\n        super(props, context);\n        this.state = {\n            stepMaxPrecision: this.getStepMaxPrecision(props),\n            value: this.getValueOrEmptyValue(props.value),\n        };\n    }\n\n    public componentWillReceiveProps(nextProps: HTMLInputProps & INumericInputProps) {\n        super.componentWillReceiveProps(nextProps);\n\n        const value = this.getValueOrEmptyValue(nextProps.value);\n\n        const didMinChange = nextProps.min !== this.props.min;\n        const didMaxChange = nextProps.max !== this.props.max;\n        const didBoundsChange = didMinChange || didMaxChange;\n\n        const sanitizedValue =\n            value !== NumericInput.VALUE_EMPTY\n                ? this.getSanitizedValue(value, /* delta */ 0, nextProps.min, nextProps.max)\n                : NumericInput.VALUE_EMPTY;\n\n        const stepMaxPrecision = this.getStepMaxPrecision(nextProps);\n\n        // if a new min and max were provided that cause the existing value to fall\n        // outside of the new bounds, then clamp the value to the new valid range.\n        if (didBoundsChange && sanitizedValue !== this.state.value) {\n            this.setState({ stepMaxPrecision, value: sanitizedValue });\n            this.invokeValueCallback(sanitizedValue, this.props.onValueChange);\n        } else {\n            this.setState({ stepMaxPrecision, value });\n        }\n    }\n\n    public render() {\n        const { buttonPosition, className, large } = this.props;\n\n        const inputGroupHtmlProps = removeNonHTMLProps(\n            this.props,\n            [\n                \"allowNumericCharactersOnly\",\n                \"buttonPosition\",\n                \"clampValueOnBlur\",\n                \"className\",\n                \"large\",\n                \"majorStepSize\",\n                \"minorStepSize\",\n                \"onButtonClick\",\n                \"onValueChange\",\n                \"selectAllOnFocus\",\n                \"selectAllOnIncrement\",\n                \"stepSize\",\n            ],\n            true,\n        );\n\n        const inputGroup = (\n            <InputGroup\n                autoComplete=\"off\"\n                {...inputGroupHtmlProps}\n                className={classNames({ [Classes.LARGE]: large })}\n                intent={this.props.intent}\n                inputRef={this.inputRef}\n                key=\"input-group\"\n                leftIconName={this.props.leftIconName}\n                onFocus={this.handleInputFocus}\n                onBlur={this.handleInputBlur}\n                onChange={this.handleInputChange}\n                onKeyDown={this.handleInputKeyDown}\n                onKeyPress={this.handleInputKeyPress}\n                onPaste={this.handleInputPaste}\n                value={this.state.value}\n            />\n        );\n\n        // the strict null check here is intentional; an undefined value should\n        // fall back to the default button position on the right side.\n        if (buttonPosition === \"none\" || buttonPosition === null) {\n            // If there are no buttons, then the control group will render the\n            // text field with squared border-radii on the left side, causing it\n            // to look weird. This problem goes away if we simply don't nest within\n            // a control group.\n            return <div className={className}>{inputGroup}</div>;\n        } else {\n            const incrementButton = this.renderButton(\n                NumericInput.INCREMENT_KEY,\n                NumericInput.INCREMENT_ICON_NAME,\n                this.handleIncrementButtonClick,\n            );\n            const decrementButton = this.renderButton(\n                NumericInput.DECREMENT_KEY,\n                NumericInput.DECREMENT_ICON_NAME,\n                this.handleDecrementButtonClick,\n            );\n\n            const buttonGroup = (\n                <div key=\"button-group\" className={classNames(Classes.BUTTON_GROUP, Classes.VERTICAL, Classes.FIXED)}>\n                    {incrementButton}\n                    {decrementButton}\n                </div>\n            );\n\n            const inputElems = buttonPosition === Position.LEFT ? [buttonGroup, inputGroup] : [inputGroup, buttonGroup];\n\n            const classes = classNames(\n                Classes.NUMERIC_INPUT,\n                Classes.CONTROL_GROUP,\n                {\n                    [Classes.LARGE]: large,\n                },\n                className,\n            );\n\n            return <div className={classes}>{inputElems}</div>;\n        }\n    }\n\n    public componentDidUpdate() {\n        if (this.shouldSelectAfterUpdate) {\n            this.inputElement.setSelectionRange(0, this.state.value.length);\n        }\n    }\n\n    protected validateProps(nextProps: HTMLInputProps & INumericInputProps) {\n        const { majorStepSize, max, min, minorStepSize, stepSize } = nextProps;\n        if (min != null && max != null && min >= max) {\n            throw new Error(Errors.NUMERIC_INPUT_MIN_MAX);\n        }\n        if (stepSize == null) {\n            throw new Error(Errors.NUMERIC_INPUT_STEP_SIZE_NULL);\n        }\n        if (stepSize <= 0) {\n            throw new Error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize <= 0) {\n            throw new Error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (majorStepSize && majorStepSize <= 0) {\n            throw new Error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize > stepSize) {\n            throw new Error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND);\n        }\n        if (majorStepSize && majorStepSize < stepSize) {\n            throw new Error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND);\n        }\n    }\n\n    // Render Helpers\n    // ==============\n\n    private renderButton(key: string, iconName: IconName, onClick: React.MouseEventHandler<HTMLElement>) {\n        // respond explicitly on key *up*, because onKeyDown triggers multiple\n        // times and doesn't always receive modifier-key flags, leading to an\n        // unintuitive/out-of-control incrementing experience.\n        const onKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n            this.handleButtonKeyUp(e, onClick);\n        };\n        return (\n            <Button\n                disabled={this.props.disabled || this.props.readOnly}\n                iconName={iconName}\n                intent={this.props.intent}\n                key={key}\n                onBlur={this.handleButtonBlur}\n                onClick={onClick}\n                onFocus={this.handleButtonFocus}\n                onKeyUp={onKeyUp}\n            />\n        );\n    }\n\n    private inputRef = (input: HTMLInputElement) => {\n        this.inputElement = input;\n    };\n\n    // Callbacks - Buttons\n    // ===================\n\n    private handleDecrementButtonClick = (e: React.MouseEvent<HTMLInputElement>) => {\n        const delta = this.getIncrementDelta(IncrementDirection.DOWN, e.shiftKey, e.altKey);\n        const nextValue = this.incrementValue(delta);\n        this.invokeValueCallback(nextValue, this.props.onButtonClick);\n    };\n\n    private handleIncrementButtonClick = (e: React.MouseEvent<HTMLInputElement>) => {\n        const delta = this.getIncrementDelta(IncrementDirection.UP, e.shiftKey, e.altKey);\n        const nextValue = this.incrementValue(delta);\n        this.invokeValueCallback(nextValue, this.props.onButtonClick);\n    };\n\n    private handleButtonFocus = () => {\n        this.setState({ isButtonGroupFocused: true });\n    };\n\n    private handleButtonBlur = () => {\n        this.setState({ isButtonGroupFocused: false });\n    };\n\n    private handleButtonKeyUp = (\n        e: React.KeyboardEvent<HTMLInputElement>,\n        onClick: React.MouseEventHandler<HTMLInputElement>,\n    ) => {\n        if (e.keyCode === Keys.SPACE || e.keyCode === Keys.ENTER) {\n            // prevent the page from scrolling (this is the default browser\n            // behavior for shift + space or alt + space).\n            e.preventDefault();\n\n            // trigger a click event to update the input value appropriately,\n            // based on the active modifier keys.\n            const fakeClickEvent = {\n                altKey: e.altKey,\n                currentTarget: e.currentTarget,\n                shiftKey: e.shiftKey,\n                target: e.target,\n            };\n            onClick(fakeClickEvent as React.MouseEvent<HTMLInputElement>);\n        }\n    };\n\n    // Callbacks - Input\n    // =================\n\n    private handleInputFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n        this.shouldSelectAfterUpdate = this.props.selectAllOnFocus;\n        this.setState({ isInputGroupFocused: true });\n        Utils.safeInvoke(this.props.onFocus, e);\n    };\n\n    private handleInputBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n        // explicitly set `shouldSelectAfterUpdate` to `false` to prevent focus\n        // hoarding on IE11 (#704)\n        this.shouldSelectAfterUpdate = false;\n\n        const baseStateChange: INumericInputState = { isInputGroupFocused: false };\n        if (this.props.clampValueOnBlur) {\n            const value = (e.target as HTMLInputElement).value;\n            const sanitizedValue = this.getSanitizedValue(value);\n            this.setState({ ...baseStateChange, value: sanitizedValue });\n            if (value !== sanitizedValue) {\n                this.invokeValueCallback(sanitizedValue, this.props.onValueChange);\n            }\n        } else {\n            this.setState(baseStateChange);\n        }\n\n        Utils.safeInvoke(this.props.onBlur, e);\n    };\n\n    private handleInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (this.props.disabled || this.props.readOnly) {\n            return;\n        }\n\n        const { keyCode } = e;\n\n        let direction: IncrementDirection;\n\n        if (keyCode === Keys.ARROW_UP) {\n            direction = IncrementDirection.UP;\n        } else if (keyCode === Keys.ARROW_DOWN) {\n            direction = IncrementDirection.DOWN;\n        }\n\n        if (direction != null) {\n            // when the input field has focus, some key combinations will modify\n            // the field's selection range. we'll actually want to select all\n            // text in the field after we modify the value on the following\n            // lines. preventing the default selection behavior lets us do that\n            // without interference.\n            e.preventDefault();\n\n            const delta = this.getIncrementDelta(direction, e.shiftKey, e.altKey);\n            this.incrementValue(delta);\n        }\n\n        Utils.safeInvoke(this.props.onKeyDown, e);\n    };\n\n    private handleInputKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        // we prohibit keystrokes in onKeyPress instead of onKeyDown, because\n        // e.key is not trustworthy in onKeyDown in all browsers.\n        if (this.props.allowNumericCharactersOnly && this.isKeyboardEventDisabledForBasicNumericEntry(e)) {\n            e.preventDefault();\n        }\n\n        Utils.safeInvoke(this.props.onKeyPress, e);\n    };\n\n    private handleInputPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n        this.didPasteEventJustOccur = true;\n        Utils.safeInvoke(this.props.onPaste, e);\n    };\n\n    private handleInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n        const value = (e.target as HTMLInputElement).value;\n\n        let nextValue: string;\n\n        if (this.props.allowNumericCharactersOnly && this.didPasteEventJustOccur) {\n            this.didPasteEventJustOccur = false;\n            const valueChars = value.split(\"\");\n            const sanitizedValueChars = valueChars.filter(this.isFloatingPointNumericCharacter);\n            const sanitizedValue = sanitizedValueChars.join(\"\");\n            nextValue = sanitizedValue;\n        } else {\n            nextValue = value;\n        }\n\n        this.shouldSelectAfterUpdate = false;\n        this.setState({ value: nextValue });\n        this.invokeValueCallback(nextValue, this.props.onValueChange);\n    };\n\n    private invokeValueCallback(value: string, callback: (valueAsNumber: number, valueAsString: string) => void) {\n        Utils.safeInvoke(callback, +value, value);\n    }\n\n    // Value Helpers\n    // =============\n\n    private incrementValue(delta: number) {\n        // pretend we're incrementing from 0 if currValue is empty\n        const currValue = this.state.value || NumericInput.VALUE_ZERO;\n        const nextValue = this.getSanitizedValue(currValue, delta);\n\n        this.shouldSelectAfterUpdate = this.props.selectAllOnIncrement;\n        this.setState({ value: nextValue });\n        this.invokeValueCallback(nextValue, this.props.onValueChange);\n\n        return nextValue;\n    }\n\n    private getIncrementDelta(direction: IncrementDirection, isShiftKeyPressed: boolean, isAltKeyPressed: boolean) {\n        const { majorStepSize, minorStepSize, stepSize } = this.props;\n\n        if (isShiftKeyPressed && majorStepSize != null) {\n            return direction * majorStepSize;\n        } else if (isAltKeyPressed && minorStepSize != null) {\n            return direction * minorStepSize;\n        } else {\n            return direction * stepSize;\n        }\n    }\n\n    private getSanitizedValue(value: string, delta = 0, min = this.props.min, max = this.props.max) {\n        if (!this.isValueNumeric(value)) {\n            return NumericInput.VALUE_EMPTY;\n        }\n\n        let nextValue = this.toMaxPrecision(parseFloat(value) + delta);\n\n        // defaultProps won't work if the user passes in null, so just default\n        // to +/- infinity here instead, as a catch-all.\n        const adjustedMin = min != null ? min : -Infinity;\n        const adjustedMax = max != null ? max : Infinity;\n        nextValue = Utils.clamp(nextValue, adjustedMin, adjustedMax);\n\n        return nextValue.toString();\n    }\n\n    private getValueOrEmptyValue(value: number | string) {\n        return value != null ? value.toString() : NumericInput.VALUE_EMPTY;\n    }\n\n    private isValueNumeric(value: string) {\n        // checking if a string is numeric in Typescript is a big pain, because\n        // we can't simply toss a string parameter to isFinite. below is the\n        // essential approach that jQuery uses, which involves subtracting a\n        // parsed numeric value from the string representation of the value. we\n        // need to cast the value to the `any` type to allow this operation\n        // between dissimilar types.\n        return value != null && (value as any) - parseFloat(value) + 1 >= 0;\n    }\n\n    private isKeyboardEventDisabledForBasicNumericEntry(e: React.KeyboardEvent<HTMLInputElement>) {\n        // unit tests may not include e.key. don't bother disabling those events.\n        if (e.key == null) {\n            return false;\n        }\n\n        // allow modified key strokes that may involve letters and other\n        // non-numeric/invalid characters (Cmd + A, Cmd + C, Cmd + V, Cmd + X).\n        if (e.ctrlKey || e.altKey || e.metaKey) {\n            return false;\n        }\n\n        // keys that print a single character when pressed have a `key` name of\n        // length 1. every other key has a longer `key` name (e.g. \"Backspace\",\n        // \"ArrowUp\", \"Shift\"). since none of those keys can print a character\n        // to the field--and since they may have important native behaviors\n        // beyond printing a character--we don't want to disable their effects.\n        const isSingleCharKey = e.key.length === 1;\n        if (!isSingleCharKey) {\n            return false;\n        }\n\n        // now we can simply check that the single character that wants to be printed\n        // is a floating-point number character that we're allowed to print.\n        return !this.isFloatingPointNumericCharacter(e.key);\n    }\n\n    private isFloatingPointNumericCharacter(char: string) {\n        return NumericInput.FLOATING_POINT_NUMBER_CHARACTER_REGEX.test(char);\n    }\n\n    private getStepMaxPrecision(props: HTMLInputProps & INumericInputProps) {\n        if (props.minorStepSize != null) {\n            return Utils.countDecimalPlaces(props.minorStepSize);\n        } else {\n            return Utils.countDecimalPlaces(props.stepSize);\n        }\n    }\n\n    private toMaxPrecision(value: number) {\n        // round the value to have the specified maximum precision (toFixed is the wrong choice,\n        // because it would show trailing zeros in the decimal part out to the specified precision)\n        // source: http://stackoverflow.com/a/18358056/5199574\n        const scaleFactor = Math.pow(10, this.state.stepMaxPrecision);\n        return Math.round(value * scaleFactor) / scaleFactor;\n    }\n}\n\nexport const NumericInputFactory = React.createFactory(NumericInput);\n"]}