{"version":3,"sources":["../src/components/hotkeys/hotkey.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,6BAA+B;AAE/B,uCAAiD;AACjD,uCAAsC;AAiEtC;IAA4B,kCAAmC;IAA/D;;IA4BA,CAAC;IAnBiB,iBAAU,GAAxB,UAAyB,OAAY;QACjC,MAAM,CAAC,OAAO,IAAI,IAAI,IAAK,OAAuB,CAAC,IAAI,KAAK,MAAM,CAAC;IACvE,CAAC;IAEM,uBAAM,GAAb;QACI,IAAM,eAA0C,EAAxC,gBAAK,EAAE,+CAAiC,CAAC;QACjD,MAAM,CAAC,CACH,6BAAK,SAAS,EAAC,WAAW;YACtB,6BAAK,SAAS,EAAC,iBAAiB,IAAE,KAAK,CAAO;YAC9C,oBAAC,mBAAQ,uBAAK,eAAe,EAAI,CAC/B,CACT,CAAC;IACN,CAAC;IAES,8BAAa,GAAvB,UAAwB,KAAmB;QACvC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,IAAI,IAAI,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YAC/C,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAChE,CAAC;IACL,CAAC;IACL,aAAC;AAAD,CA5BA,AA4BC,CA5B2B,0BAAiB;AAC3B,mBAAY,GAAG;IACzB,YAAY,EAAE,KAAK;IACnB,QAAQ,EAAE,KAAK;IACf,MAAM,EAAE,KAAK;IACb,cAAc,EAAE,KAAK;IACrB,eAAe,EAAE,KAAK;CACzB,CAAC;AAPO,wBAAM","file":"hotkey.js","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as React from \"react\";\n\nimport { AbstractComponent } from \"../../common\";\nimport { KeyCombo } from \"./keyCombo\";\n\nexport interface IHotkeyProps {\n    /**\n     * Whether the hotkey should be triggerable when focused in a text input.\n     * @default false\n     */\n    allowInInput?: boolean;\n\n    /**\n     * Hotkey combination string, such as \"space\" or \"cmd+n\".\n     */\n    combo: string;\n\n    /**\n     * Whether the hotkey cannot be triggered.\n     * @default false\n     */\n    disabled?: boolean;\n\n    /**\n     * Human-friendly label for the hotkey.\n     */\n    label: string;\n\n    /**\n     * If `false`, the hotkey is active only when the target is focused. If\n     * `true`, the hotkey can be triggered regardless of what component is\n     * focused.\n     * @default false\n     */\n    global?: boolean;\n\n    /**\n     * Unless the hotkey is global, you must specify a group where the hotkey\n     * will be displayed in the hotkeys dialog. This string will be displayed\n     * in a header at the start of the group of hotkeys.\n     */\n    group?: string;\n\n    /**\n     * When `true`, invokes `event.preventDefault()` before the respective `onKeyDown` and\n     * `onKeyUp` callbacks are invoked. Enabling this can simplify handler implementations.\n     * @default false\n     */\n    preventDefault?: boolean;\n\n    /**\n     * When `true`, invokes `event.stopPropagation()` before the respective `onKeyDown` and\n     * `onKeyUp` callbacks are invoked. Enabling this can simplify handler implementations.\n     * @default false\n     */\n    stopPropagation?: boolean;\n\n    /**\n     * `keydown` event handler.\n     */\n    onKeyDown?(e: KeyboardEvent): any;\n\n    /**\n     * `keyup` event handler.\n     */\n    onKeyUp?(e: KeyboardEvent): any;\n}\n\nexport class Hotkey extends AbstractComponent<IHotkeyProps, {}> {\n    public static defaultProps = {\n        allowInInput: false,\n        disabled: false,\n        global: false,\n        preventDefault: false,\n        stopPropagation: false,\n    };\n\n    public static isInstance(element: any): element is React.ReactElement<IHotkeyProps> {\n        return element != null && (element as JSX.Element).type === Hotkey;\n    }\n\n    public render() {\n        const { label, ...spreadableProps } = this.props;\n        return (\n            <div className=\"pt-hotkey\">\n                <div className=\"pt-hotkey-label\">{label}</div>\n                <KeyCombo {...spreadableProps} />\n            </div>\n        );\n    }\n\n    protected validateProps(props: IHotkeyProps) {\n        if (props.global !== true && props.group == null) {\n            throw new Error(\"non-global <Hotkey>s must define a group\");\n        }\n    }\n}\n"]}