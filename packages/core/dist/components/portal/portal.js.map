{"version":3,"sources":["../src/components/portal/portal.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,6BAA+B;AAC/B,oCAAsC;AAEtC,8CAAgD;AAChD,4CAA8C;AAC9C,4CAAgE;AAChE,4CAAgD;AAqBhD,IAAM,mBAAmB,GAAwC;IAC7D,wBAAwB,EAAE,UAAC,GAAmB,EAAE,GAAyB;QACrE,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;YACnD,MAAM,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,gCAAgC,CAAC,CAAC;QAC9D,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;CACJ,CAAC;AAEF;;;;GAIG;AACH;IAA4B,kCAAiC;IAA7D;;IAwCA,CAAC;IAjCU,uBAAM,GAAb;QACI,MAAM,CAAC,IAAmB,CAAC;IAC/B,CAAC;IAEM,kCAAiB,GAAxB;QACI,IAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACpD,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAE5C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,wBAAwB,IAAI,IAAI,CAAC,CAAC,CAAC;YAChD,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;QACvE,CAAC;QAED,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QACzC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAEM,mCAAkB,GAAzB;QAAA,iBAUC;QATG,kFAAkF;QAClF,QAAQ,CAAC,mCAAmC;QACxC,qBAAqB,CAAC,IAAI,EAC1B,gDAAS,0BAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,KAChE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAClB,EACN,IAAI,CAAC,aAAa,EAClB,cAAM,OAAA,kBAAU,CAAC,KAAI,CAAC,KAAK,CAAC,eAAe,CAAC,EAAtC,CAAsC,CAC/C,CAAC;IACN,CAAC;IAEM,qCAAoB,GAA3B;QACI,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACpD,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;IAChC,CAAC;IACL,aAAC;AAAD,CAxCA,AAwCC,CAxC2B,KAAK,CAAC,SAAS;AACzB,kBAAW,GAAG,kBAAkB,CAAC;AACjC,mBAAY,GAAG,mBAAmB,CAAC;AAFxC,wBAAM","file":"portal.js","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { IProps, removeNonHTMLProps } from \"../../common/props\";\nimport { safeInvoke } from \"../../common/utils\";\n\nexport interface IPortalProps extends IProps, React.HTMLProps<HTMLDivElement> {\n    /**\n     * A React `ref` handler callback for the detached container root element.\n     * As this component renders its contents into a separate container, the result of the `ref`\n     * prop is not backed by a DOM node. Hence this callback is necessary to get the real DOM node.\n     */\n    containerRef?: (ref: HTMLDivElement) => void;\n\n    /**\n     * Callback invoked when the children of this `Portal` have been added to the DOM.\n     */\n    onChildrenMount?: () => void;\n}\n\nexport interface IPortalContext {\n    /** Additional class to add to portal element */\n    blueprintPortalClassName?: string;\n}\n\nconst REACT_CONTEXT_TYPES: React.ValidationMap<IPortalContext> = {\n    blueprintPortalClassName: (obj: IPortalContext, key: keyof IPortalContext) => {\n        if (obj[key] != null && typeof obj[key] !== \"string\") {\n            return new Error(Errors.PORTAL_CONTEXT_CLASS_NAME_STRING);\n        }\n        return undefined;\n    },\n};\n\n/**\n * This component detaches its contents and re-attaches them to document.body.\n * Use it when you need to circumvent DOM z-stacking (for dialogs, popovers, etc.).\n * Any class names passed to this element will be propagated to the new container element on document.body.\n */\nexport class Portal extends React.Component<IPortalProps, {}> {\n    public static displayName = \"Blueprint.Portal\";\n    public static contextTypes = REACT_CONTEXT_TYPES;\n    public context: IPortalContext;\n\n    private targetElement: HTMLElement;\n\n    public render() {\n        return null as JSX.Element;\n    }\n\n    public componentDidMount() {\n        const targetElement = document.createElement(\"div\");\n        targetElement.classList.add(Classes.PORTAL);\n\n        if (this.context.blueprintPortalClassName != null) {\n            targetElement.classList.add(this.context.blueprintPortalClassName);\n        }\n\n        document.body.appendChild(targetElement);\n        this.targetElement = targetElement;\n        this.componentDidUpdate();\n    }\n\n    public componentDidUpdate() {\n        // use special render function to preserve React context, in case children need it\n        ReactDOM.unstable_renderSubtreeIntoContainer(\n            /* parentComponent */ this,\n            <div {...removeNonHTMLProps(this.props)} ref={this.props.containerRef}>\n                {this.props.children}\n            </div>,\n            this.targetElement,\n            () => safeInvoke(this.props.onChildrenMount),\n        );\n    }\n\n    public componentWillUnmount() {\n        ReactDOM.unmountComponentAtNode(this.targetElement);\n        this.targetElement.remove();\n    }\n}\n"]}